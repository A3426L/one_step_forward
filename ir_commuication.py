import RPi.GPIO as GPIO
import time
import subprocess
import re
import threading

INTERVAL_TIME = 1.0
TOLERANCE  = 15
TOLER_MIN =  (100 - TOLERANCE) / 100.0
TOLER_MAX =  (100 + TOLERANCE) / 100.0
 
num_data = {
	"0": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 570, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552],
	"1": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552],
	"2": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552],
	"3": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 570, 552, 1693, 552],
	"4": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552],
	"5": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552],
	"6": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 570, 552, 1693, 552, 570, 552, 1693, 552],
	"7": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552],
	"8": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552],
	"9": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552]
	}
	
send_list = ["1","2"]

class IR_Process:
	def __init__(self):
		self.irrp_process = None
		self.ir_number = "0"
		
	def sort_stdout(self,text):
		pattern = r'\[([0-9, ]+)\]'
		matches = re.findall(pattern, text)
		if matches:
			numbers = [int(num) for num in matches[0].split(',')]
		else:
			print("sort_error!")
		return numbers
		
	def compare(self,p1, p2):

	   if len(p1) != len(p2):
		   print("not equal len")
		   return False

	   for i in range(len(p1)):
		   v = p1[i] / p2[i]
		   if (v < TOLER_MIN) or (v > TOLER_MAX):
			   return False
			
	   for i in range(len(p1)):
		   p1[i] = int(round((p1[i]+p2[i])/2.0))

	   return True
		
	def time_out_callback(self):
		print("time_out!")
		self.irrp_process.terminate()
		
	def data_handling(self,output):
		numbers = self.sort_stdout(output)
		recog = self.compare(numbers,num_data[self.ir_number])
		return recog

	def recv_func(self,ir_number):
		self.ir_number = ir_number
		self.irrp_process = subprocess.Popen(["python3", "irrp_re.py", "-r", "-g18", "-f", "recv", "data"], stdout=subprocess.PIPE,text=True)
		timer = threading.Timer(INTERVAL_TIME,self.time_out_callback)
		timer.start()
		output = self.irrp_process.stdout.read()
		if output == "":
			print("no-data")
			return 0
		else:
			timer.cancel()
			recog = self.data_handling(output)
			return recog
			
	def send_data(self,ir_number):
		subprocess.Popen(["python3", "irrp_re.py", "-p", "-g17", "-f", "read", ir_number])
	
		



