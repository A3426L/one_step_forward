
import RPi.GPIO as GPIO
import time
import subprocess
import re

TOLERANCE  = 15
TOLER_MIN =  (100 - TOLERANCE) / 100.0
TOLER_MAX =  (100 + TOLERANCE) / 100.0

def sort_stdout(text):
	pattern = r'\[([0-9, ]+)\]'
	matches = re.findall(pattern, text)
	if matches:
		numbers = [int(num) for num in matches[0].split(',')]
	else:
		print("sort_error!")
	return numbers
	
def recv_data():
	read_cmd = "python3 irrp_re.py -r -g18 -f recv data"
	result = subprocess.run([read_cmd],capture_output=True,shell=True,text = True)
	recv_data = result.stdout
	return recv_data

def compare(p1, p2):
   """
   Check that both recodings correspond in pulse length to within
   TOLERANCE%.  If they do average the two recordings pulse lengths.

   Input

        M    S   M   S   M   S   M    S   M    S   M
   1: 9000 4500 600 560 600 560 600 1700 600 1700 600
   2: 9020 4570 590 550 590 550 590 1640 590 1640 590

   Output

   A: 9010 4535 595 555 595 555 595 1670 595 1670 595
   """
   if len(p1) != len(p2):
      return False

   for i in range(len(p1)):
      v = p1[i] / p2[i]
      if (v < TOLER_MIN) or (v > TOLER_MAX):
         return False

   for i in range(len(p1)):
       p1[i] = int(round((p1[i]+p2[i])/2.0))


   return True
 
num_data = {
	"0": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 570, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552],
	"1": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552],
	"2": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552],
	"3": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 570, 552, 1693, 552],
	"4": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552],
	"5": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552],
	"6": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 570, 552, 1693, 552, 570, 552, 1693, 552],
	"7": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552],
	"8": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552],
	"9": [9032, 4484, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 570, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 570, 552, 1693, 552, 1693, 552, 570, 552, 1693, 552]
	}


#text = recv_data()

irrp_process = subprocess.Popen(["python3", "irrp_re.py", "-r", "-g18", "-f", "recv", "data"], stdout=subprocess.PIPE,text=True)


timeout_seconds = 10
time.sleep(timeout_seconds)

irrp_process.terminate()
irrp_process.wait()

output = irrp_process.stdout.read()
print(output)

print("ok!")
#text = irrp_process.stdout
#print(text)
#numbers = sort_stdout(text)
#recog = compare(numbers,num_data["0"])
#print(recog)

